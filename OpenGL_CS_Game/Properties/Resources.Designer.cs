//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenGL_CS_Game.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OpenGL_CS_Game.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///in vec2 f_texcoord;
        ///out vec4 outputColor;
        ///
        ///uniform sampler2D maintexture;
        ///
        ///void
        ///main()
        ///{
        ///	vec2 flipped_texcoord = vec2(f_texcoord.x, 1.0 - f_texcoord.y);
        ///    outputColor = texture(maintexture, flipped_texcoord);
        ///}.
        /// </summary>
        internal static string Default_FS {
            get {
                return ResourceManager.GetString("Default_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330
        ///
        ///in  vec3 vPosition;
        ///in vec2 texcoord;
        ///out vec2 f_texcoord;
        ///
        ///uniform mat4 modelview;
        ///
        ///void
        ///main()
        ///{
        ///    gl_Position = modelview * vec4(vPosition, 1.0);
        ///    f_texcoord = texcoord;
        ///}.
        /// </summary>
        internal static string Default_VS {
            get {
                return ResourceManager.GetString("Default_VS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 420
        ///
        ///in vec3 LightDir;
        ///in vec2 TexCoord;
        ///in vec3 ViewDir;
        ///
        ///layout(binding = 0) uniform sampler2D ColorTex;
        ///layout(binding = 1) uniform sampler2D NormalMapTex;
        ///
        ///struct LightInfo
        ///{
        ///  vec4 Position;  // Light position in eye coords.
        ///  vec3 Intensity; // A,D,S intensity
        ///};
        ///uniform LightInfo Light;
        ///
        ///struct MaterialInfo
        ///{
        ///  vec3 Ka;            // Ambient reflectivity
        ///  vec3 Ks;            // Specular reflectivity
        ///  float Shininess;    // Specular shininess factor
        ///};
        ///uniform Material [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string PhongNormalMap_FS {
            get {
                return ResourceManager.GetString("PhongNormalMap_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 420
        ///
        ///layout (location = 0) in vec3 VertexPosition;
        ///layout (location = 1) in vec3 VertexNormal;
        ///layout (location = 2) in vec2 VertexTexCoord;
        ///layout (location = 3) in vec4 VertexTangent;
        ///
        ///struct LightInfo {
        ///  vec4 Position;  // Light position in eye coords.
        ///  vec3 Intensity; // A,D,S intensity
        ///};
        ///uniform LightInfo Light;
        ///
        ///out vec3 LightDir;
        ///out vec2 TexCoord;
        ///out vec3 ViewDir;
        ///
        ///uniform mat4 ModelViewMatrix;
        ///uniform mat3 NormalMatrix;
        ///uniform mat4 ProjectionMatrix;
        ///uniform mat4 MV [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string PhongNormalMap_VS {
            get {
                return ResourceManager.GetString("PhongNormalMap_VS", resourceCulture);
            }
        }
    }
}
